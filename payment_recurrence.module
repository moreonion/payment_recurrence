<?php

/**
 * @file
 * Hook implementations.
 */

/**
 * Implements hook_entity_load().
 */
function payment_recurrence_entity_load(array $entities, $entity_type) {
  if ($entity_type == 'payment') {
    $query = db_select('payment_line_item_recurrence', 't')
      ->fields('t')
      ->condition('pid', array_keys($entities));
    $result = $query->execute();
    while ($data = $result->fetchAssoc()) {
      $payment = $entities[$data['pid']];
      $line_item = $payment->line_items[$data['name']];
      unset($data['pid']);
      unset($data['name']);
      if (!empty($data['start_date'])) {
        $data['start_date'] = new DateTime($data['start_date'], new \DateTimeZone('UTC'));
      }
      $line_item->recurrence = (object) $data;
    }
  }
}

/**
 * Implements hook_payment_insert().
 */
function payment_recurrence_payment_insert(Payment $payment) {
  $fields = drupal_get_schema('payment_line_item_recurrence')['fields'];
  foreach ($payment->line_items as $name => $line_item) {
    if (!empty($line_item->recurrence) && $line_item->recurrence->interval_unit) {
      $values = array_intersect_key((array) $line_item->recurrence, $fields);
      unset($values['pid']);
      unset($values['name']);
      if (!empty($values['start_date']) && $values['start_date'] instanceof DateTime) {
        $values['start_date'] = $values['start_date']->format('Y-m-d');
      }
      db_merge('payment_line_item_recurrence')
        ->key(['pid' => $payment->pid, 'name' => $name])
        ->fields($values)
        ->execute();
    }
  }
}

/**
 * Implements hook_payment_update().
 */
function payment_recurrence_payment_update(Payment $payment) {
  payment_recurrence_payment_insert($payment);
  if ($payment->line_items) {
    db_delete('payment_line_item_recurrence')
      ->condition('pid', $payment->pid)
      ->condition('name', array_keys($payment->line_items), 'NOT IN')
      ->execute();
  }
}

/**
 * Implements hook_payment_delete().
 */
function payment_recurrence_payment_delete(Payment $payment) {
  db_delete('payment_line_item_recurrence')
    ->condition('pid', $payment->pid)
    ->execute();
}
